import torch
import os
from pathlib import Path
import wandb
import yaml
from tqdm import tqdm
from typing import Optional

from models.yolo import YOLOModel
from utils.config import YOLOConfig


class YOLOTrainer:
    def __init__(self, config: YOLOConfig):
        self.config = config
        self.device = torch.device(config.device)
        
        # Initialize model
        self.model = YOLOModel(config)
        
        # Training state
        self.current_epoch = 0
        self.best_map = 0.0
        
        # These will be set after training starts
        self.output_dir = None
        self.run_name = None
    
    def init_wandb(self, run_name: str):
        """Initialize Weights & Biases logging"""
        if self.config.wandb_mode != 'disabled':
            wandb.init(
                project=self.config.wandb_project,
                name=f"{self.config.wandb_name}_{run_name}",
                config=self.config.__dict__,
                mode=self.config.wandb_mode
            )
        print(f"Wandb mode: {self.config.wandb_mode}")
    
    
    def train(self):
        """Train the YOLO model"""
        print(f"Starting YOLO training for {self.config.epochs} epochs")
        
        # Let YOLO handle directory creation
        results = self.model.train(
            project="runs",
            name=self.config.project_name,
        )
        
        # Get the actual output directory that YOLO created
        # YOLO creates: runs/{project_name}/{run_name}
        self.output_dir = Path("runs") / self.config.project_name / results.save_dir.name
        self.run_name = results.save_dir.name
        
        print(f"YOLO created output directory: {self.output_dir}")
        
        # Initialize wandb with the actual run name
        self.init_wandb(self.run_name)
    
        # Get training results and log to wandb
        if self.config.wandb_mode != 'disabled':
            self.log_results(results)
        
        print("Training completed!")
        return results
    
    def log_results(self, results):
        """Log training results to wandb"""
        if hasattr(results, 'results_dict'):
            wandb.log(results.results_dict)
        
        # Log any CSV files generated by YOLO
        csv_files = list(self.output_dir.glob('*.csv'))
        for csv_file in csv_files:
            wandb.save(str(csv_file))
    
    def validate(self, model_path: Optional[str] = None):
        """Validate the trained model"""
        if model_path:
            # Load specific model for validation
            temp_config = self.config
            temp_config.checkpoint_path = model_path
            model = YOLOModel(temp_config)
        else:
            model = self.model
        
        print("Running validation...")
        results = model.validate()
        
        if self.config.wandb_mode != 'disabled':
            wandb.log({"val_map": results.box.map})
        
        return results
    
    def test_predictions(self, test_images_path: str, output_path: Optional[str] = None):
        """Test the model on sample images"""
        if output_path is None:
            output_path = self.output_dir / 'test_predictions'
        
        output_path = Path(output_path)
        output_path.mkdir(parents=True, exist_ok=True)
        
        test_images = list(Path(test_images_path).glob('*.png')) + \
                     list(Path(test_images_path).glob('*.jpg')) + \
                     list(Path(test_images_path).glob('*.jpeg'))
        
        print(f"Testing on {len(test_images)} images...")
        
        for image_path in tqdm(test_images, desc="Testing"):
            results = self.model.predict(str(image_path))
            
            # Save prediction
            if results and len(results) > 0:
                result = results[0]
                result.save(filename=str(output_path / f"pred_{image_path.name}"))
                
                # Log detection info
                if len(result.boxes) > 0:
                    for i, box in enumerate(result.boxes):
                        conf = box.conf.item() if hasattr(box.conf, 'item') else box.conf
                        print(f"  {image_path.name}: Detection {i+1} - Confidence: {conf:.4f}")
                else:
                    print(f"  {image_path.name}: No detections")
        
        print(f"Test predictions saved to: {output_path}")


def main():
    """Main training function"""
    # Configuration
    config = YOLOConfig(
        # Model settings
        model_type="yolo11n",
        device="cpu",
        pretrained_path="./checkpoints",
        
        # Dataset paths
        dataset_path="./sample_data/train",
        val_dataset_path="./sample_data/val",
        class_names=['scar'],
        
        # Training parameters
        epochs=10,
        batch_size=16,
        image_size=640,
        patience=50,
        
        # Augmentation (optimized for medical scars)
        mosaic=0.9,
        mixup=0.1,
        copy_paste=0.4,
        degrees=15.0,
        hsv_v=0.3,
        
        # Detection parameters
        iou_threshold=0.2,
        conf_threshold=0.15,
        max_detections=2,
        
        # Project settings
        project_name="yolo_scar_detection",
        experiment_name="enhanced_scar_detection",
        
        # Wandb settings
        wandb_project="YOLO-scar-detection",
        wandb_name="scar_detection_v1",
        wandb_mode="disabled"  # Set to "online" to enable wandb logging
    )
    
    # Create trainer
    trainer = YOLOTrainer(config)
    
    # Train the model
    results = trainer.train()
    
    # Validate the model
    val_results = trainer.validate()
    print(f"Validation mAP: {val_results.box.map:.4f}")
    
    # Test on sample images (optional)
    # trainer.test_predictions("/path/to/test/images")
    
    print("Training pipeline completed!")


if __name__ == "__main__":
    main() 